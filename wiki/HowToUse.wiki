#Arduino library to manage "n" LEDs RGB

Introduction
This is a library that allow you to manage an amount of RGB LEDs using only three digital pins of an Arduino.

Details
How to use it:

1) Download the code last version files (.h and .cpp) and the example file.

2) Rename it removing the version number, for example from LEDMatrix595.0.81.h to LEDMatrix595.h.

3) Create a directory LEDMatrix595 below your <Arduino dir>\libraries

4) Put the .h and .cpp files inside it.

5) Mount the circuit, connect to the Arduino.

6) Open example.ino file, adjust it (the port numbers and the number of RGB LEDs

7) Enjoy!

/*
  LEDMatrix_h - Library to manage RGB LEDs connect using 74HC595 chip(s) and an Arduino
  Created by Mauro Assis in 04/may/2012
  Released into the public domain.
*/

#ifndef LEDMatrix595_h
#define LEDMatrix595_h

#include "Arduino.h"

class LEDMatrix595
{
   public:
// Constructor
//   int _LEDCount: number of LEDs to be managed
//   int _clockPin: number of Arduino port that´s connected the clock pin of the first 595 CI (CI pin 12)
//   int _latchPin: number of Arduino port that´s connected the latch pin of the first 595 CI (CI pin 11)
//   int _dataPin: number of Arduino port that´s connected the data pin of the first 595 CI (CI pin 14)
     LEDMatrix595(int _LEDCount, int _clockPin, int _latchPin, int _dataPin);
//   color constants 
     int red;
     int green;
     int blue;
//   set the corresponding LED mask (from now on, it will be considered common cathod)
     void setLEDMask(byte LED);
//   switch on the RGB LED corresponding colors      
     void LEDOn(byte LED, byte color);
//   switch off the RGB LED corresponding colors      
     void LEDOff(byte LED);
//   send LEDs to CIs
     void sendLEDs();
//   switch off all LEDs
     void allLEDsOff();
//   print LED Matriz to the serial port in binary mode, in a way to debug
     void printMatrix();
//   print LED Mask to the serial port in binary mode, in a way to debug
     void printLEDMask();
//   if true, it wil print matrix in serial port
     int debug;    //Indicates debug mode           
// Keep led values
//                     LED mask: each number indicates where the corresponding LED data will be stored
//                          0  1  2    3  4  5    6  7    8  9  0    1   2    3  4  5   6  7  8    9  0  1    2  3    4  5  6
     byte matrix[10]; //=  {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
// Stores a mask indicting when a LED is common-positive (000) or common-negative (111)
     byte LEDMask[10];//=  {B00000000,B00000000,B00111111,B11111100,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
   private:
     int LEDCount;  //Number of LEDs to manage  
     int CI595Count;//Number of 74HC595 necessary to manage the LEDs    
     int clockPin;  //Pin connected to Pin 11 of 74HC595 (Clock)
     int latchPin;  //Pin connected to Pin 12 of 74HC595 (Latch)
     int dataPin;   //Pin connected to Pin 14 of 74HC595 (Data)  
     void shiftOut(byte dataOut);
     void internalPrintMatrix(byte _matrix[]);
     void internalLEDOn(byte _matrix[], byte ledNo, byte color);
     void internalLEDOff(byte _matrix[], byte ledNo);
     void clearMatrix(byte _matrix[]);
};
#endif
Hint: You can use Wiki Syntax.
Enter a comment: